auto
terminals + * - / ; ( )   # verbatim terminal symbols
valterminal Int i32     # terminal symbol with value
nonterminal E
nonterminal T : E  # specifies that AST for T should merge into E
nonterminal F : E
nonterminal ExpList
startsymbol ExpList
variant-group-for E BinaryOp + - * /  # simplifies AST enum by combining variants

# production rules:
E --> E + T  | E - T | T
T --> T * F | T / F | F
F:Neg --> - F                    # 'Neg' names enum variant in AST
F --> Int | ( E )
ExpList --> E<;+> ;?    # ;-separated list with optional trailing ;


!mod simplecalc_ast; // !-lines are injected verbatim into the parser
!fn main()  {
!  let mut scanner1 = simplecalclexer::from_str("10+-2*4; 9-(4-1)");
!  let mut parser1 = make_parser();
!  let parseresult = parse_with(&mut parser1, &mut scanner1);
!  let ast =
!    parseresult.
!    unwrap_or_else(|x| {
!       println!("Parsing errors encountered; results not guaranteed..");
!       x
!    });
!  println!("\nAST: {:?}\n",&ast);
!}//main
