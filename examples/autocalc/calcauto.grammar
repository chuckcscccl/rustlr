# Grammar testing automatic generation of abstract syntax
# Hybrid approach

auto
lifetime 'lt
terminals + - / = ;
lexterminal Star *
terminals let in
#typedterminal int i64
valueterminal int ~ i64 ~ Num(n) ~ n
valueterminal var ~ &'lt str ~ Alphanum(n) ~ n
#typedterminal var &'lt str
#lexvalue int Num(n) n
#lexvalue var Alphanum(x) x
lexterminal LPAREN (
lexterminal RPAREN )
lexattribute set_line_comment("#")

nonterminal Expr
nonterminal ExprList
#nonterminal ExprList Vec<LC<@Expr>>
nonterminal UnaryExpr : Expr
nonterminal LetExpr : Expr
#nonterminal UnaryExpr
#nonterminal LetExpr
nonterminal Txpr
#nonterminal Txpr : Expr
nonterminal Sxpr
nonterminal Aexpr
nonterminal Bexpr : Aexpr
nonterminals Yxpr Zxpr Xxpr
nonterminals AA BB CC DD
flatten BB
flatten Yxpr Zxpr Xxpr CC

topsym ExprList
resync ;

left Star 500
left / 500
left + 400
left - 400

#variant-group Binop * /
variant-group-for Expr Binop * /

default Expr Val(0)
default ExprList nil

# rule for testing AST generation:
#lexvalue bigint BigNumber(n) n
Txpr --> ; int:ai int:bi ;
Expr --> Sxpr ; Sxpr:[]
Sxpr --> Txpr:a1 ; Txpr:b
Zxpr --> int:x ; Yxpr:a ; Yxpr:b int:y Xxpr:[xx] Expr Xxpr:yy { /*AAAA*/ ... } 
Yxpr --> var ; var
Xxpr:X1 --> int:a int:[b] ; { /*BBBB*/ ... }
Xxpr:X2 --> int ; Yxpr:u var { println!("see {:?}",u); ... }
AA --> BB:p int:q BB:r
AA --> var var CC var
BB --> var:a AA:b AA:c
#BB --> var AA AA
CC --> ; Star ;
CC --> int + ;
CC --> let / ;
DD --> ; let in ;

Aexpr:ae --> int
Bexpr:be --> var
Expr --> ; ; Aexpr

UnaryExpr:Val --> int
UnaryExpr:Var --> var
UnaryExpr:Neg --> - UnaryExpr
UnaryExpr --> LPAREN LetExpr RPAREN

Expr --> UnaryExpr       #passthru case
Expr:Plus--> Expr + Expr
Expr:Minus --> Expr - Expr
# testing variant-group
Expr --> Expr / Expr | Expr Star Expr  # variant group cases
#Expr --> Expr * Expr

LetExpr --> Expr
LetExpr:Let --> let var:let_var = Expr:init_value in LetExpr:let_body

ExprList:nil --> 
ExprList:cons --> LetExpr:[car] ; ExprList:cdr

#ExprList --> LetExpr<;+> ;? 

#ExprList --> { vec![] }
#ExprList --> ExprList:cdr LetExpr:car ; { cdr.push(car); cdr }
#ExprList --> (LetExpr ;)+

EOF

notes:

passthru will not change the type of a non-terminal.
However, when generating a one-time use nonterminal when processing
+, ?, passthru will set the type of nonterminal, so E --> F means E
will inherit the type of F.  But in writing a grammar, this is only
possible if E and F have the same type.
